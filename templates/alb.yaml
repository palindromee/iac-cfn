AWSTemplateFormatVersion: '2010-09-09'
Description: 'Application Load Balancer in Public Subnets'

Parameters:
  Environment:
    Type: String
    Description: "Environment name for resource tagging and naming"
    AllowedValues:
      - prod
      - stage
      - dev
      - test
    Default: dev
    ConstraintDescription: "Must be one of: prod, stage, dev, test"

  ProjectName:
    Type: String
    Description: "Project name for resource naming and tagging"
    MinLength: 2
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: "Must start with letter, contain only alphanumeric and hyphens"

  CostCenter:
    Type: String
    Description: "Cost center for billing and tracking"
    Default: ""

  Owner:
    Type: String
    Description: "Owner or team responsible for resources"
    Default: ""

Conditions:
  HasCostCenter: !Not [!Equals [!Ref CostCenter, '']]
  HasOwner: !Not [!Equals [!Ref Owner, '']]

Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ProjectName}-${Environment}-alb-sg'
      VpcId: 
        Fn::ImportValue: !Sub '${ProjectName}-${Environment}-vpc-VPC-ID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP traffic
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS traffic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${ProjectName}-alb-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation
        - !If
          - HasCostCenter
          - Key: CostCenter
            Value: !Ref CostCenter
          - !Ref AWS::NoValue
        - !If
          - HasOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-alb'
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-vpc-Public-Subnet-0-ID'
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-vpc-Public-Subnet-1-ID'
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-vpc-Public-Subnet-2-ID'
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${ProjectName}-alb'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation
        - !If
          - HasCostCenter
          - Key: CostCenter
            Value: !Ref CostCenter
          - !Ref AWS::NoValue
        - !If
          - HasOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-tg'
      Port: 80
      Protocol: HTTP
      VpcId: 
        Fn::ImportValue: !Sub '${ProjectName}-${Environment}-vpc-VPC-ID'
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${ProjectName}-tg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation
        - !If
          - HasCostCenter
          - Key: CostCenter
            Value: !Ref CostCenter
          - !Ref AWS::NoValue
        - !If
          - HasOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  ALBArn:
    Description: ALB ARN
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-ALB-Arn'

  ALBDNSName:
    Description: ALB DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALB-DNSName'

  ALBTargetGroupArn:
    Description: ALB Target Group ARN
    Value: !Ref ALBTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-ALB-TargetGroup-Arn'

  ALBSecurityGroupId:
    Description: ALB Security Group ID
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ALB-SG-ID'