AWSTemplateFormatVersion: '2010-09-09'
Description: 'Application Layer - EC2 instances in private subnets'

Parameters:
  Environment:
    Type: String
    Description: "Environment name for resource tagging and naming"
    AllowedValues:
      - prod
      - stage
      - dev
      - test
    Default: dev
    ConstraintDescription: "Must be one of: prod, stage, dev, test"

  ProjectName:
    Type: String
    Description: "Project name for resource naming and tagging"
    MinLength: 2
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: "Must start with letter, contain only alphanumeric and hyphens"

  CostCenter:
    Type: String
    Description: "Cost center for billing and tracking"
    Default: ""

  Owner:
    Type: String
    Description: "Owner or team responsible for resources"
    Default: ""

  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large

  KeyPairName:
    Type: String
    Description: EC2 Key Pair for SSH access
    Default: ""

  MinSize:
    Type: Number
    Description: Minimum number of instances in Auto Scaling Group
    Default: 1
    MinValue: 1
    MaxValue: 10

  MaxSize:
    Type: Number
    Description: Maximum number of instances in Auto Scaling Group
    Default: 3
    MinValue: 1
    MaxValue: 20

  DesiredCapacity:
    Type: Number
    Description: Desired number of instances in Auto Scaling Group
    Default: 2
    MinValue: 1
    MaxValue: 10

Mappings:
  AmiMap:
    us-east-1:
      AMI: ami-0c02fb55956c7d316  # Amazon Linux 2
    us-west-2:
      AMI: ami-008fe2fc65df48dac  # Amazon Linux 2

Resources:
  AppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-app-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${ProjectName}-app-role'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation
        - !If
          - HasCostCenter
          - Key: CostCenter
            Value: !Ref CostCenter
          - !Ref AWS::NoValue
        - !If
          - HasOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ProjectName}-${Environment}-app-profile'
      Roles:
        - !Ref AppInstanceRole

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-${Environment}-app-sg'
      GroupDescription: Security group for application instances
      VpcId: 
        Fn::ImportValue: !Sub '${ProjectName}-${Environment}-vpc-VPC-ID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub '${ProjectName}-${Environment}-alb-ALB-SG-ID'
          Description: HTTP from ALB
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub '${ProjectName}-${Environment}-alb-ALB-SG-ID'
          Description: HTTPS from ALB
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${ProjectName}-app-sg'
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName
        - Key: ManagedBy
          Value: CloudFormation
        - !If
          - HasCostCenter
          - Key: CostCenter
            Value: !Ref CostCenter
          - !Ref AWS::NoValue
        - !If
          - HasOwner
          - Key: Owner
            Value: !Ref Owner
          - !Ref AWS::NoValue

  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${ProjectName}-${Environment}-app-template'
      LaunchTemplateData:
        ImageId: !FindInMap [AmiMap, !Ref 'AWS::Region', AMI]
        InstanceType: !Ref InstanceType
        KeyName: !If [HasKeyPair, !Ref KeyPairName, !Ref 'AWS::NoValue']
        IamInstanceProfile:
          Arn: !GetAtt AppInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref AppSecurityGroup
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
          HttpPutResponseHopLimit: 2
          InstanceMetadataTags: enabled
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            
            # Install and configure CloudWatch agent
            yum install -y amazon-cloudwatch-agent
            
            # Basic CloudWatch configuration for system metrics
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
            {
              "metrics": {
                "namespace": "AWS/EC2/Custom",
                "metrics_collected": {
                  "cpu": {
                    "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_system", "cpu_usage_user"],
                    "metrics_collection_interval": 60
                  },
                  "disk": {
                    "measurement": ["used_percent"],
                    "metrics_collection_interval": 60,
                    "resources": ["*"]
                  },
                  "mem": {
                    "measurement": ["mem_used_percent"],
                    "metrics_collection_interval": 60
                  }
                }
              }
            }
            EOF
            
            # Start CloudWatch agent with configuration
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub '${Environment}-${ProjectName}-app'
              - Key: Environment
                Value: !Ref Environment
              - Key: Project
                Value: !Ref ProjectName
              - Key: ManagedBy
                Value: CloudFormation
              - !If
                - HasCostCenter
                - Key: CostCenter
                  Value: !Ref CostCenter
                - !Ref AWS::NoValue
              - !If
                - HasOwner
                - Key: Owner
                  Value: !Ref Owner
                - !Ref AWS::NoValue

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${ProjectName}-${Environment}-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref AppLaunchTemplate
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
      MinSize: !If [IsProd, 3, !Ref MinSize]
      MaxSize: !If [IsProd, 10, !Ref MaxSize]
      DesiredCapacity: !If [IsProd, 3, !Ref DesiredCapacity]
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-vpc-Private-Subnet-0-ID'
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-vpc-Private-Subnet-1-ID'
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-vpc-Private-Subnet-2-ID'
      TargetGroupARNs:
        - Fn::ImportValue: !Sub '${ProjectName}-${Environment}-alb-ALB-TargetGroup-Arn'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-${ProjectName}-asg'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref ProjectName
          PropagateAtLaunch: true
        - Key: ManagedBy
          Value: CloudFormation
          PropagateAtLaunch: true
        - !If
          - HasCostCenter
          - Key: CostCenter
            Value: !Ref CostCenter
            PropagateAtLaunch: true
          - !Ref AWS::NoValue
        - !If
          - HasOwner
          - Key: Owner
            Value: !Ref Owner
            PropagateAtLaunch: true
          - !Ref AWS::NoValue

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: 1
      PolicyType: SimpleScaling

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 300
      ScalingAdjustment: -1
      PolicyType: SimpleScaling

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-cpu-high'
      AlarmDescription: Scale up on high CPU
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleUpPolicy
      TreatMissingData: notBreaching

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-cpu-low'
      AlarmDescription: Scale down on low CPU
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 25
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleDownPolicy
      TreatMissingData: notBreaching


Conditions:
  HasKeyPair: !Not [!Equals [!Ref KeyPairName, ""]]
  IsProd: !Equals [!Ref Environment, 'prod']
  HasCostCenter: !Not [!Equals [!Ref CostCenter, '']]
  HasOwner: !Not [!Equals [!Ref Owner, '']]

Outputs:
  AppSecurityGroupId:
    Description: Application Security Group ID
    Value: !Ref AppSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-App-SG-ID'

  AutoScalingGroupName:
    Description: Auto Scaling Group Name
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub '${AWS::StackName}-ASG-Name'